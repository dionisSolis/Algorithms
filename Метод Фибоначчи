#include <iostream>
#include <Windows.h>
#include <math.h>
#include <stdio.h>
#include <ctime>
#include <iomanip>
using namespace std;

void ShowInfo(int step, double x, double y) {
	std::cout << step << ") x = " << x << " y = " << y << endl;
}

int fib(int n) {
	if (n == 0 or n == 1) {
		return 1;
	}

	return fib(n - 1) + fib(n - 2);
}

void FindMinValue(double firstLimit, double secondLimit) {
	srand(time(0));
	double a = firstLimit, b = secondLimit;

	double min = 0;
	double epsilant = 0.000001;
	int step = 0;
	int n = 1;
	double delta = b - a;

	while (delta / fib(n + 1) > epsilant){
		n++;
	}

	int* array = new int[n + 2];
;
	for (int i = 0; i < n + 2; i++) {
		array[i] = fib(i);
	}

	cout << endl;

	while (true) {
		delta = b - a;
		double a1, b1, x;

		double alpha = a + (array[n - step - 1] * delta / array[n - step + 1]);
		double beta = a + (array[n - step] * delta / array[n - step + 1]);

		double yAlpha = alpha * alpha * alpha - alpha + exp(-alpha);
		double yBeta = beta * beta * beta - beta + exp(-beta);

		if (yAlpha <= yBeta) {
			x = alpha;
			a1 = a;
			b1 = beta;
		}
		else {
			a1 = alpha;
			x = beta;
			b1 = b;
		}

		if (b1 - a1 < epsilant) {
			min = (a1 + b1) / 2;
			ShowInfo(step, x, x * x * x - x + exp(-x));
			break;
		}
		else{
			a = a1;
			b = b1;
			step++;
			ShowInfo(step, x, x * x * x - x + exp(-x));
		}
	}

	std::cout << "\nМинимальное значение функции на [" << firstLimit << ", " << secondLimit << "]\n"
		<< "Точка минимума (" << min << ", " << min * min * min - min + exp(-min) << ")\n"
		<< "Количество шагов " << step
		<< "\nВремя работы программы " << clock() / 1000.0 << "\n\n";
}

void FindMaxValue(double firstLimit, double secondLimit) {
	srand(time(0));
	double a = firstLimit, b = secondLimit;

	double max = 0;
	double epsilant = 0.000001;
	int step = 0;
	int n = 1;
	double delta = b - a;

	while (delta / fib(n + 1) > epsilant) {
		n++;
	}

	int* array = new int[n + 2];
	;
	for (int i = 0; i < n + 2; i++) {
		array[i] = fib(i);
	}

	cout << endl;

	while (true) {
		delta = b - a;
		double a1, b1, x;

		double alpha = a + (array[n - step - 1] * delta / array[n - step + 1]);
		double beta = a + (array[n - step] * delta / array[n - step + 1]);

		double yAlpha = alpha * alpha * alpha - alpha + exp(-alpha);
		double yBeta = beta * beta * beta - beta + exp(-beta);

		if (yAlpha > yBeta) {
			x = alpha;
			a1 = a;
			b1 = beta;
		}
		else {
			a1 = alpha;
			x = beta;
			b1 = b;
		}

		if (b1 - a1 < epsilant) {
			max = (a1 + b1) / 2;
			ShowInfo(step, x, x * x * x - x + exp(-x));
			break;
		}
		else {
			a = a1;
			b = b1;
			step++;
			ShowInfo(step, x, x * x * x - x + exp(-x));
		}
	}

	std::cout << "\nМаксимальное значение функции на [" << firstLimit << ", " << secondLimit << "]\n"
		<< "Точка минимума (" << max << ", " << max * max * max - max + exp(-max) << ")\n"
		<< "Количество шагов " << step
		<< "\nВремя работы программы " << clock() / 1000.0 << "\n\n";
}

int main()
{
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);
	
	cout << "Метод Фибоначчи\n\n";
	FindMinValue(-5, -3);
	FindMaxValue(-3, 0);
	FindMinValue(0, 3);
}
